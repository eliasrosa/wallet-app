// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TickerType {
  STOCK
  FII
  ETF
  RF
}

model Ticker {
  id           String         @id @unique(sort: Asc)
  name         String
  type         TickerType?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  dividends    Dividend[]
  movements    Movement[]
  datas        TickerData[]
  walletTicker WalletTicker[]
}

enum TickerDataSourceEnum {
  INVEST10
}

model TickerData {
  id                 String               @id @default(cuid())
  source             TickerDataSourceEnum
  tickerId           String
  price              Float
  dy12m              Float
  pvp                Float
  var12m             Float
  volDayAvg          String
  lastDividend       Float
  assetValuePerShare Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticker Ticker @relation(fields: [tickerId], references: [id])
}

model Institution {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  dividends Dividend[]
  movements Movement[]
}

model DividendType {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  dividends Dividend[]
}

model Dividend {
  id             String   @id @default(cuid())
  tickerId       String
  quantity       Float?
  price          Float?
  total          Float
  dividendTypeId String
  institutionId  String
  hash           String
  paymentAt      DateTime @db.Date
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  ticker       Ticker       @relation(fields: [tickerId], references: [id])
  institution  Institution  @relation(fields: [institutionId], references: [id])
  dividendType DividendType @relation(fields: [dividendTypeId], references: [id])

  @@index([hash])
}

model MovementType {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  movements Movement[]
}

model Movement {
  id             String   @id @default(cuid())
  tickerId       String
  quantity       Float
  price          Float?
  total          Float?
  isCredit       Boolean
  movementTypeId String
  institutionId  String
  hash           String   @unique
  movementAt     DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  ticker       Ticker       @relation(fields: [tickerId], references: [id])
  institution  Institution  @relation(fields: [institutionId], references: [id])
  movementType MovementType @relation(fields: [movementTypeId], references: [id])

  @@index([hash])
}

model Wallet {
  id        String         @id @default(cuid())
  name      String         @unique
  goalFII   Float
  goalStock Float
  goalETF   Float
  goalRF    Float
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  tickers   WalletTicker[]
}

model WalletTicker {
  tickerId    String   @id
  walletId    String
  goal        Float
  isGoalFixed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  ticker Ticker @relation(fields: [tickerId], references: [id], onDelete: Cascade)

  @@unique([walletId, tickerId])
  @@index([walletId, isGoalFixed])
}
